Ticket Counter
N people from 1 to N are standing in the queue at a movie ticket counter. It is a weird counter, as it distributes tickets to the first K people and 
then the last K people and again first K people and so on, once a person gets a ticket moves out of the queue. 
The task is to find the last person to get the ticket.

Example 1:

Input:
N = 9
K = 3
Output:
6
Explanation:
Starting queue will like {1, 2, 3, 4, 5, 6, 7, 8, 9}. 
After the first distribution queue will look like {4, 5, 6, 7, 8, 9}. And
after the second distribution queue will look like {4, 5, 6}. The last person to get the ticket will be 6.

solution:---
class Solution {
    public static int distributeTicket(int N,int K)
    {
        ArrayList<Integer>list=new ArrayList<>();
        for(int i=1;i<=N;i++){
            list.add(i);
        }
        int x=K;
        int f=0;
        while(list.size()>K){
            if(f==0){
                while(x--!=0){
                    list.remove(0);
                }
                f=1;
                x=K;
            }
            else{
                while(x--!=0){
                    list.remove(list.size()-1);
                }
                f=0;
                x=K;
            }
        }
        int ans=f==1?list.get(0):list.get(list.size()-1);
        return ans;
        
    }
}
